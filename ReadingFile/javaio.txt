Reading and writing files in Java

Java has the package java.io that provides api useful to operation of reading and writing files from and to file system.
Abstract classes used for this purpose are InputStream and OutputStream,wich main methods are respectively read() and write().
Because of they are abstract, implemention of these methods is defined in which classes extending it. Among them there are FileInputStream and FileOutputStream. read() method of FileInputStream reads a byte at once from the input stream and returns an int, if value of int is equal to -1 the stream is closed. This is efficient because memory of java application is not loaded but the operation is very slow.Infact in the operations of i/o the most expensive activities are the calls to the os and the accesses to disk.Every time read() method is call it calls os and accesses disk,it clear that for large files this solution works but it takes a lot amount of time and a lot spending of resources. To reduce this cost of resources and to save time we can use a buffer.In java we have the BufferedInputStream and BufferedOutputStream api. They wraps input and output stream and to every access to file , they load a chuncks of byte in the bytearray of buffered api.In this way , a byte array is loaded in memory of java application,and our application can access faster to data of file.Reducing calls to OS and accesses to disk, buffered api take the same actions in less time and spending less resources,but using more memoryof the java application.

See ReadingFile.java file to take an example.