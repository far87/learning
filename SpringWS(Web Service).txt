* Spring Ws (web service)

It is used to create a web service.
This technology is focused around MessageDispatcher that dispatches incoming messages to endpoint. 
Endpoint are generally annotated with @Endpoint and contain handling methods.
These methods handle incoming XML request messages by inspecting part of the messages, generally the payload, and create 
a response.Handling methods generally are annotated with @PayloadRoot, to indicate what sort of messages they can handle.

Spring-WS's XML handling is extremely flexible, it supports a large amount of xml handling libraries, and also marshalling tachineques, like jaxb, to 
transform XML in object.

In general , it's required to configure MessageDispatcherServlet both as a servlet and as a DispatcherServlet.
Then with @Endpoint class-level annotation and @payloadroot methods-level annotation we define what our service must do
when a message with a specific value of tag request payload root arrives.


**Some information
Maven has a specific archetype for springws
 
**About SOAP
It is a protocol to exchange information.It is primarily based on XML document over http, but also email and jms can be used.
This protocol is based on using a wsdl file, which is a xml document specifing all data and services offered by a web service.Both client
and server use thid document as basesi to exchange information and execute remote procedure calls.

To configure what it needs us we have to define a @configuration class that define the bean of MessageDispatcherServlet type, with url addresses it intercepts and passing it application context .
Then we have to configure the bean of DefaultWsdl11Definition type.It is important because it receives the xsd schema we have generated for our service and exposes the wsdl to an appropriate url.This URL depends on settings and name 
we give to this bean. 
The xsd schema is passed to bean DefaultWsdl11Definition defining a bean of XsdSchema type and passing it to DefaultWsdl11Definition bean.

ex of config class:
*****

        package com.example.producingwebservice;
        
        import org.springframework.boot.web.servlet.ServletRegistrationBean;
        import org.springframework.context.ApplicationContext;
        import org.springframework.context.annotation.Bean;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.core.io.ClassPathResource;
        import org.springframework.ws.config.annotation.EnableWs;
        import org.springframework.ws.config.annotation.WsConfigurerAdapter;
        import org.springframework.ws.transport.http.MessageDispatcherServlet;
        import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;
        import org.springframework.xml.xsd.SimpleXsdSchema;
        import org.springframework.xml.xsd.XsdSchema;
        
        @EnableWs
        @Configuration
        public class WebServiceConfig extends WsConfigurerAdapter {
            @Bean
            public ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(ApplicationContext applicationContext) {
                MessageDispatcherServlet servlet = new MessageDispatcherServlet();
                servlet.setApplicationContext(applicationContext);
                servlet.setTransformWsdlLocations(true);
                return new ServletRegistrationBean<>(servlet, "/ws/*");
            }
        
            @Bean(name = "countries")
            public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchema countriesSchema) {
                DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();
                wsdl11Definition.setPortTypeName("CountriesPort");
                wsdl11Definition.setLocationUri("/ws");
                wsdl11Definition.setTargetNamespace("http://spring.io/guides/gs-producing-web-service");
                wsdl11Definition.setSchema(countriesSchema);
                return wsdl11Definition;
            }
        
            @Bean
            public XsdSchema countriesSchema() {
                return new SimpleXsdSchema(new ClassPathResource("countries.xsd"));
            }
        }
		
*****		

Let's remember all: an xml request incomes , our MessageDispatcher intercepts it , analyzes message and ,depends on message in it, dispatches request to a particular endpoint with a particular method.Endpoint constructs response and
sends it back to client. Reponse comes back in xml format to our client. Remeber that response is also an element defined in xsd schema.

example of xsd schema
*****
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://spring.io/guides/gs-producing-web-service"
           targetNamespace="http://spring.io/guides/gs-producing-web-service" elementFormDefault="qualified">

    <xs:element name="getCountryRequest">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="name" type="xs:string"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="getCountryResponse">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="country" type="tns:country"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="country">
        <xs:sequence>
            <xs:element name="name" type="xs:string"/>
            <xs:element name="population" type="xs:int"/>
            <xs:element name="capital" type="xs:string"/>
            <xs:element name="currency" type="tns:currency"/>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="currency">
        <xs:restriction base="xs:string">
            <xs:enumeration value="GBP"/>
            <xs:enumeration value="EUR"/>
            <xs:enumeration value="PLN"/>
        </xs:restriction>
    </xs:simpleType>
</xs:schema>

*****

example of endpoint class
*****
package com.example.producingwebservice;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ws.server.endpoint.annotation.Endpoint;
import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
import org.springframework.ws.server.endpoint.annotation.RequestPayload;
import org.springframework.ws.server.endpoint.annotation.ResponsePayload;

import io.spring.guides.gs_producing_web_service.GetCountryRequest;
import io.spring.guides.gs_producing_web_service.GetCountryResponse;

@Endpoint
public class CountryEndpoint {
    private static final String NAMESPACE_URI = "http://spring.io/guides/gs-producing-web-service";

    private CountryRepository countryRepository;

    @Autowired
    public CountryEndpoint(CountryRepository countryRepository) {
        this.countryRepository = countryRepository;
    }

    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "getCountryRequest")
    @ResponsePayload
    public GetCountryResponse getCountry(@RequestPayload GetCountryRequest request) {
        GetCountryResponse response = new GetCountryResponse();
        response.setCountry(countryRepository.findCountry(request.getName()));

        return response;
    }
}
*****
